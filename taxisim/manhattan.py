import random
from . import utils


# Bounding boxes for Manhattan identified by the (lat, long) coordinates of the
# box's (bottom_left, top_right) corners.
bounding_boxes = [
    ((40.7051, -74.0202), (40.7211, -73.9996)),
    ((40.7089, -74.0170), (40.7582, -73.9708)),
    ((40.7436, -74.0051), (40.7799, -73.9603)),
    ((40.7575, -73.9982), (40.7872, -73.9490)),
    ((40.7707, -73.9910), (40.8003, -73.9385)),
    ((40.7828, -73.9763), (40.8180, -73.9363)),
    ((40.8180, -73.9606), (40.8491, -73.9338)),
    ((40.7918, -73.9517), (40.8047, -73.9293)),
    ((40.8452, -73.9472), (40.8615, -73.9281)),
    ((40.8510, -73.9472), (40.8699, -73.9242)),
    ((40.8579, -73.9368), (40.8699, -73.9194)),
    ((40.8626, -73.9368), (40.8747, -73.9146)),
    ((40.8664, -73.9146), (40.8737, -73.9108)),
    ((40.7000, -74.0195), (40.7127, -74.0008)),
]


# Returns true if a (lat, long) position is in Manhattan.
def in_manhattan(pos):
    for box in bounding_boxes:
        if utils.in_box(pos, box):
            return True
    return False


# Zone centers for the busiest zones for pickups, as determined from historical demand.
zone_centers = [
    (40.745, -73.995), (40.785, -73.955), (40.765, -73.975), (40.785, -73.945), 
    (40.725, -73.995), (40.745, -73.985), (40.775, -73.985), (40.735, -74.005), 
    (40.765, -73.965), (40.735, -73.995), (40.795, -73.935), (40.785, -73.975), 
    (40.765, -73.985), (40.755, -73.995), (40.725, -74.005), (40.745, -74.005), 
    (40.715, -74.015), (40.775, -73.945), (40.755, -73.985), (40.765, -73.995), 
    (40.755, -73.965), (40.795, -73.975), (40.735, -73.985), (40.755, -73.975), 
    (40.775, -73.965), (40.765, -73.955), (40.745, -73.975), (40.705, -74.015), 
    (40.815, -73.935), (40.775, -73.955), (40.715, -74.005), (40.715, -73.985), 
    (40.785, -73.965), (40.725, -73.985), (40.765, -74.005), (40.795, -73.965), 
    (40.735, -73.975), (40.775, -73.975), (40.825, -73.935), (40.815, -73.955), 
    (40.755, -74.005), (40.805, -73.955), (40.785, -73.985), (40.705, -74.005), 
    (40.815, -73.945), (40.805, -73.965), (40.805, -73.935), (40.775, -73.995), 
    (40.745, -73.965), (40.795, -73.955), (40.795, -73.945), (40.725, -73.975), 
    (40.715, -73.975), (40.845, -73.935), (40.715, -73.995), (40.805, -73.945), 
    (40.825, -73.945), (40.825, -73.955), (40.725, -74.015), (40.815, -73.965), 
    (40.845, -73.945), (40.835, -73.945), (40.855, -73.935), (40.755, -73.955), 
    (40.735, -74.015), (40.705, -73.995), (40.765, -73.945)
]


# Cumulative weights for the above location list.
cum_weights = [
    0.04619956203883385, 0.07605839266417744, 0.10977190736457758, 0.11852088030302294, 
    0.1362562035057394, 0.18434399427273251, 0.21350849622003581, 0.23928605532294375, 
    0.2895868501593395, 0.32332302360447757, 0.32443977602370316, 0.3513535093270406, 
    0.3960861873910559, 0.4477950613647361, 0.4666627823104258, 0.48716516984077907, 
    0.5020050291623439, 0.5183268782885526, 0.5630805966155388, 0.5777845034686762, 
    0.6049933399475288, 0.6193643790505878, 0.6538348037240187, 0.7200242340669911, 
    0.7459377456383265, 0.7755834761643492, 0.8087073240076413, 0.8184549001963218, 
    0.818839559362944, 0.8666284704969656, 0.8799350880912651, 0.882247898536299, 
    0.8882017534631463, 0.9045548932368502, 0.9071935580109722, 0.9209479555608067, 
    0.9287776308555996, 0.9390792673025142, 0.9392103643256408, 0.9409119281566735, 
    0.9467433179631516, 0.9495805165006914, 0.9589590788464973, 0.9678310563992342, 
    0.9685021868386142, 0.9766917045796021, 0.9776768204817788, 0.9796427363347538, 
    0.9798666263125213, 0.9819981667996519, 0.9845931325660651, 0.9878122928006154, 
    0.9882865079583446, 0.9885222668024034, 0.9932822216791317, 0.9946023633070762, 
    0.9951628974923783, 0.9961534083337784, 0.9974962087064608, 0.9982455657645789, 
    0.9984926539810066, 0.9992037069706392, 0.9993213166457074, 0.9998063216818832, 
    0.9998813113370872, 0.999946050607767, 1.0
]


# Returns a random (lat, long) position from the list of zone centers with probability
# weighted by historical demand.
def get_rand_pos():
    return random.choices(zone_centers, cum_weights=cum_weights)[0]
